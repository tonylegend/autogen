"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5553],{217:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(5893),o=t(1151);const a={},s="Installation",l={id:"Installation",title:"Installation",description:"Option 1: Install and Run AutoGen in Docker",source:"@site/docs/Installation.md",sourceDirName:".",slug:"/Installation",permalink:"/autogen/docs/Installation",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/Installation.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Getting Started",permalink:"/autogen/docs/Getting-Started"},next:{title:"Multi-agent Conversation Framework",permalink:"/autogen/docs/Use-Cases/agent_chat"}},r={},c=[{value:"Option 1: Install and Run AutoGen in Docker",id:"option-1-install-and-run-autogen-in-docker",level:2},{value:"Step 1. Install Docker.",id:"step-1-install-docker",level:4},{value:"Step 2. Build a docker image",id:"step-2-build-a-docker-image",level:4},{value:"Step 3.  Run applications built with AutoGen from a docker image.",id:"step-3--run-applications-built-with-autogen-from-a-docker-image",level:4},{value:"Option 2: Install AutoGen Locally Using Virtual Environment",id:"option-2-install-autogen-locally-using-virtual-environment",level:2},{value:"Option a: venv",id:"option-a-venv",level:3},{value:"Option b: conda",id:"option-b-conda",level:3},{value:"Option c: poetry",id:"option-c-poetry",level:3},{value:"Python",id:"python",level:2},{value:"Migration guide to v0.2",id:"migration-guide-to-v02",level:3},{value:"Optional Dependencies",id:"optional-dependencies",level:3},{value:"docker",id:"docker",level:4},{value:"blendsearch",id:"blendsearch",level:4},{value:"retrievechat",id:"retrievechat",level:4},{value:"Teachability",id:"teachability",level:4},{value:"Large Multimodal Model (LMM) Agents",id:"large-multimodal-model-lmm-agents",level:4},{value:"mathchat",id:"mathchat",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.h2,{id:"option-1-install-and-run-autogen-in-docker",children:"Option 1: Install and Run AutoGen in Docker"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"})," is a containerization platform that simplifies the setup and execution of your code. A properly built docker image could provide isolated and consistent environment to run your code securely across platforms. One option of using AutoGen is to install and run it in a docker container. You can do that in ",(0,i.jsx)(n.a,{href:"https://codespaces.new/microsoft/autogen?quickstart=1",children:"Github codespace"})," or follow the instructions below to do so."]}),"\n",(0,i.jsx)(n.h4,{id:"step-1-install-docker",children:"Step 1. Install Docker."}),"\n",(0,i.jsxs)(n.p,{children:["Install docker following ",(0,i.jsx)(n.a,{href:"https://docs.docker.com/get-docker/",children:"this instruction"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For Mac users, alternatively you may choose to install ",(0,i.jsx)(n.a,{href:"https://smallsharpsoftwaretools.com/tutorials/use-colima-to-run-docker-containers-on-macos/",children:"colima"})," to run docker containers, if there is any issues with starting the docker daemon."]}),"\n",(0,i.jsx)(n.h4,{id:"step-2-build-a-docker-image",children:"Step 2. Build a docker image"}),"\n",(0,i.jsxs)(n.p,{children:["AutoGen provides ",(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/tree/main/samples/dockers/",children:"dockerfiles"})," that could be used to build docker images. Use the following command line to build a docker image named ",(0,i.jsx)(n.code,{children:"autogen_img"})," (or other names you prefer) from one of the provided dockerfiles named ",(0,i.jsx)(n.code,{children:"Dockerfile.base"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker build -f samples/dockers/Dockerfile.base -t autogen_img https://github.com/microsoft/autogen.git#main\n"})}),"\n",(0,i.jsxs)(n.p,{children:["which includes some common python libraries and essential dependencies of AutoGen, or build from ",(0,i.jsx)(n.code,{children:"Dockerfile.full"})," which include additional dependencies for more advanced features of AutoGen with the following command line:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"docker build -f samples/dockers/Dockerfile.full -t autogen_full_img https://github.com/microsoft/autogen.git\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once you build the docker image, you can use ",(0,i.jsx)(n.code,{children:"docker images"})," to check whether it has been created successfully."]}),"\n",(0,i.jsx)(n.h4,{id:"step-3--run-applications-built-with-autogen-from-a-docker-image",children:"Step 3.  Run applications built with AutoGen from a docker image."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mount your code to the docker image and run your application from there:"})," Now suppose you have your application built with AutoGen in a main script named ",(0,i.jsx)(n.code,{children:"twoagent.py"})," (",(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/test/twoagent.py",children:"example"}),") in a folder named ",(0,i.jsx)(n.code,{children:"myapp"}),". With the command line below, you can mont your folder and run the application in docker."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Mount the local folder `myapp` into docker image and run the script named "twoagent.py" in the docker.\ndocker run -it -v `pwd`/myapp:/myapp autogen_img:latest python /myapp/main_twoagent.py\n'})}),"\n",(0,i.jsx)(n.h2,{id:"option-2-install-autogen-locally-using-virtual-environment",children:"Option 2: Install AutoGen Locally Using Virtual Environment"}),"\n",(0,i.jsx)(n.p,{children:"When installing AutoGen locally, we recommend using a virtual environment for the installation. This will ensure that the dependencies for AutoGen are isolated from the rest of your system."}),"\n",(0,i.jsx)(n.h3,{id:"option-a-venv",children:"Option a: venv"}),"\n",(0,i.jsxs)(n.p,{children:["You can create a virtual environment with ",(0,i.jsx)(n.code,{children:"venv"})," as below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python3 -m venv pyautogen\nsource pyautogen/bin/activate\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The following command will deactivate the current ",(0,i.jsx)(n.code,{children:"venv"})," environment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deactivate\n"})}),"\n",(0,i.jsx)(n.h3,{id:"option-b-conda",children:"Option b: conda"}),"\n",(0,i.jsxs)(n.p,{children:["Another option is with ",(0,i.jsx)(n.code,{children:"Conda"}),". You can install it by following ",(0,i.jsx)(n.a,{href:"https://docs.conda.io/projects/conda/en/stable/user-guide/install/index.html",children:"this doc"}),",\nand then create a virtual environment as below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"conda create -n pyautogen python=3.10  # python 3.10 is recommended as it's stable and not too old\nconda activate pyautogen\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The following command will deactivate the current ",(0,i.jsx)(n.code,{children:"conda"})," environment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"conda deactivate\n"})}),"\n",(0,i.jsx)(n.h3,{id:"option-c-poetry",children:"Option c: poetry"}),"\n",(0,i.jsxs)(n.p,{children:["Another option is with ",(0,i.jsx)(n.code,{children:"poetry"}),", which is a dependency manager for Python."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://python-poetry.org/docs/",children:"Poetry"})," is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you. Poetry offers a lockfile to ensure repeatable installs, and can build your project for distribution."]}),"\n",(0,i.jsxs)(n.p,{children:["You can install it by following ",(0,i.jsx)(n.a,{href:"https://python-poetry.org/docs/#installation",children:"this doc"}),",\nand then create a virtual environment as below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"poetry init\npoetry shell\n\npoetry add pyautogen\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The following command will deactivate the current ",(0,i.jsx)(n.code,{children:"poetry"})," environment:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"exit\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now, you're ready to install AutoGen in the virtual environment you've just created."}),"\n",(0,i.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,i.jsxs)(n.p,{children:["AutoGen requires ",(0,i.jsx)(n.strong,{children:"Python version >= 3.8, < 3.12"}),". It can be installed from pip:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install pyautogen\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pyautogen<0.2"})," requires ",(0,i.jsx)(n.code,{children:"openai<1"}),". Starting from pyautogen v0.2, ",(0,i.jsx)(n.code,{children:"openai>=1"})," is required."]}),"\n",(0,i.jsx)(n.h3,{id:"migration-guide-to-v02",children:"Migration guide to v0.2"}),"\n",(0,i.jsxs)(n.p,{children:["openai v1 is a total rewrite of the library with many breaking changes. For example, the inference requires instantiating a client, instead of using a global class method.\nTherefore, some changes are required for users of ",(0,i.jsx)(n.code,{children:"pyautogen<0.2"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"api_base"})," -> ",(0,i.jsx)(n.code,{children:"base_url"}),", ",(0,i.jsx)(n.code,{children:"request_timeout"})," -> ",(0,i.jsx)(n.code,{children:"timeout"})," in ",(0,i.jsx)(n.code,{children:"llm_config"})," and ",(0,i.jsx)(n.code,{children:"config_list"}),". ",(0,i.jsx)(n.code,{children:"max_retry_period"})," and ",(0,i.jsx)(n.code,{children:"retry_wait_time"})," are deprecated. ",(0,i.jsx)(n.code,{children:"max_retries"})," can be set for each client."]}),"\n",(0,i.jsx)(n.li,{children:"MathChat is unsupported until it is tested in future release."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"autogen.Completion"})," and ",(0,i.jsx)(n.code,{children:"autogen.ChatCompletion"})," are deprecated. The essential functionalities are moved to ",(0,i.jsx)(n.code,{children:"autogen.OpenAIWrapper"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from autogen import OpenAIWrapper\nclient = OpenAIWrapper(config_list=config_list)\nresponse = client.create(messages=[{"role": "user", "content": "2+2="}])\nprint(client.extract_text_or_completion_object(response))\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Inference parameter tuning and inference logging features are currently unavailable in ",(0,i.jsx)(n.code,{children:"OpenAIWrapper"}),". Logging will be added in a future release.\nInference parameter tuning can be done via ",(0,i.jsx)(n.a,{href:"https://microsoft.github.io/FLAML/docs/Use-Cases/Tune-User-Defined-Function",children:(0,i.jsx)(n.code,{children:"flaml.tune"})}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"seed"})," in autogen is renamed into ",(0,i.jsx)(n.code,{children:"cache_seed"})," to accommodate the newly added ",(0,i.jsx)(n.code,{children:"seed"})," param in openai chat completion api. ",(0,i.jsx)(n.code,{children:"use_cache"})," is removed as a kwarg in ",(0,i.jsx)(n.code,{children:"OpenAIWrapper.create()"})," for being automatically decided by ",(0,i.jsx)(n.code,{children:"cache_seed"}),": int | None. The difference between autogen's ",(0,i.jsx)(n.code,{children:"cache_seed"})," and openai's ",(0,i.jsx)(n.code,{children:"seed"})," is that:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"autogen uses local disk cache to guarantee the exactly same output is produced for the same input and when cache is hit, no openai api call will be made."}),"\n",(0,i.jsxs)(n.li,{children:["openai's ",(0,i.jsx)(n.code,{children:"seed"})," is a best-effort deterministic sampling with no guarantee of determinism. When using openai's ",(0,i.jsx)(n.code,{children:"seed"})," with ",(0,i.jsx)(n.code,{children:"cache_seed"})," set to None, even for the same input, an openai api call will be made and there is no guarantee for getting exactly the same output."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"optional-dependencies",children:"Optional Dependencies"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h4,{id:"docker",children:"docker"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Even if you install AutoGen locally, we highly recommend using Docker for ",(0,i.jsx)(n.a,{href:"/autogen/docs/FAQ#enable-python-3-docker-image",children:"code execution"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To use docker for code execution, you also need to install the python package ",(0,i.jsx)(n.code,{children:"docker"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install docker\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You might want to override the default docker image used for code execution. To do that set ",(0,i.jsx)(n.code,{children:"use_docker"})," key of ",(0,i.jsx)(n.code,{children:"code_execution_config"})," property to the name of the image. E.g.:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'user_proxy = autogen.UserProxyAgent(\n    name="agent",\n    human_input_mode="TERMINATE",\n    max_consecutive_auto_reply=10,\n    code_execution_config={"work_dir":"_output", "use_docker":"python:3"},\n    llm_config=llm_config,\n    system_message=""""Reply TERMINATE if the task has been solved at full satisfaction.\nOtherwise, reply CONTINUE, or the reason why the task is not solved yet."""\n)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h4,{id:"blendsearch",children:"blendsearch"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pyautogen<0.2"})," offers a cost-effective hyperparameter optimization technique ",(0,i.jsx)(n.a,{href:"https://arxiv.org/abs/2303.04673",children:"EcoOptiGen"})," for tuning Large Language Models. Please install with the [blendsearch] option to use it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pip install "pyautogen[blendsearch]<0.2"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example notebooks:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/oai_completion.ipynb",children:"Optimize for Code Generation"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/oai_chatgpt_gpt4.ipynb",children:"Optimize for Math"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h4,{id:"retrievechat",children:"retrievechat"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pyautogen"})," supports retrieval-augmented generation tasks such as question answering and code generation with RAG agents. Please install with the [retrievechat] option to use it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pip install "pyautogen[retrievechat]"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["RetrieveChat can handle various types of documents. By default, it can process\nplain text and PDF files, including formats such as 'txt', 'json', 'csv', 'tsv',\n'md', 'html', 'htm', 'rtf', 'rst', 'jsonl', 'log', 'xml', 'yaml', 'yml' and 'pdf'.\nIf you install ",(0,i.jsx)(n.a,{href:"https://unstructured-io.github.io/unstructured/installation/full_installation.html",children:"unstructured"}),"\n(",(0,i.jsx)(n.code,{children:'pip install "unstructured[all-docs]"'}),"), additional document types such as 'docx',\n'doc', 'odt', 'pptx', 'ppt', 'xlsx', 'eml', 'msg', 'epub' will also be supported."]}),"\n",(0,i.jsxs)(n.p,{children:["You can find a list of all supported document types by using ",(0,i.jsx)(n.code,{children:"autogen.retrieve_utils.TEXT_FORMATS"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Example notebooks:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_RetrieveChat.ipynb",children:"Automated Code Generation and Question Answering with Retrieval Augmented Agents"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb",children:"Group Chat with Retrieval Augmented Generation (with 5 group member agents and 1 manager agent)"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_qdrant_RetrieveChat.ipynb",children:"Automated Code Generation and Question Answering with Qdrant based Retrieval Augmented Agents"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h4,{id:"teachability",children:"Teachability"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To use Teachability, please install AutoGen with the [teachable] option."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pip install "pyautogen[teachable]"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Example notebook:  ",(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_teachability.ipynb",children:"Chatting with a teachable agent"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h4,{id:"large-multimodal-model-lmm-agents",children:"Large Multimodal Model (LMM) Agents"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We offered Multimodal Conversable Agent and LLaVA Agent. Please install with the [lmm] option to use it."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pip install "pyautogen[lmm]"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example notebooks:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_lmm_llava.ipynb",children:"LLaVA Agent"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.h4,{id:"mathchat",children:"mathchat"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"pyautogen<0.2"})," offers an experimental agent for math problem solving. Please install with the [mathchat] option to use it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'pip install "pyautogen[mathchat]<0.2"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example notebooks:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/notebook/agentchat_MathChat.ipynb",children:"Using MathChat to Solve Math Problems"})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>s});var i=t(7294);const o={},a=i.createContext(o);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);